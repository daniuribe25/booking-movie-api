c
n
c
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[3].bookings.any?
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[3].bookings
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[3]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[4]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[9]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[8]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[7]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[6]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[5]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[4]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[3]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[2]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[1]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all[0]
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'"))
movie_dates[3]
movie_dates[4]
movie_dates[0]
movie_dates.filter{|md| md.bookings.any? }
n
c
e
n
c
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).map{|md| md.bookings }.filter{|md| md.bookings.any? }
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).map{|md| md.bookings }
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'")).all
MovieDate.where(Sequel.lit("date >= '#{from}' and date <= '#{to}'"))
c
MovieDate.where("date >= '#{from}'").and("date <= '#{to}'").map{|md| md.bookings }
c
MovieDate.where("date >= '#{from}'").and("date <= '#{to}'").map{|md| md.bookings }
to
from
c
from
c
from.present? ? from : '0000-01-0'
from.present?
t
f
from
f
c
booking[:id_user]
c
@@max_bookings_per_movie_date
movie_date.bookings
movie_date.bookings.count
movie_date.bookings.count === @@max_bookings_per_movie_date
c
@@max_bookings_per_movie_date
@max_bookings_per_movie_date
c
@max_bookings_per_movie_date
movie_date.bookings.count
movie_date.bookings.length
movie_date.bookings
movie_date.id
movie_date
c
ApiError
c
ApiErrorc
ApiError
c
Api::Entities::ApiError.new({code: 404, message: "There is no function of this movie on #{booking[:date]}"})
Api::Entities::ApiError(code: 404, message: "There is no function of this movie on #{booking[:date]}")
Api::Entities::ApiError
ApiError
booking
movie_date
c
MovieDate.where(week_day: week_day).all
MovieDate.where(week_day: week_day).all[0].values
MovieDate.where(week_day: week_day).all[0][:values]
MovieDate.where(week_day: week_day).all[0]
MovieDate.where(week_day: week_day).all.map{|md| md.to_json }
MovieDate.where(week_day: week_day).all
c
MovieDate.where(week_day: week_day).all
MovieDate.where(week_day: week_day)
week_day
c
Date.parse date
Date.new
Date.new(date)
date
c
n
c
e
n
c
c}
e
n
Movie
c
self.Movie
Movie
Models::Movie
Movie
c
Models::Movie
Movie
c
Movie
c
e
n
movie
c
movie
c
movie
c
day_of_week
Date.today.wday
movies
movies.filter {|m| m[:show_dates].any? {|sd| sd.wday === day_of_week }}
